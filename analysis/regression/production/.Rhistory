library(pbkrtest)
library(multcomp)
library(sjPlot)
library(sjmisc)
library(ggplot2)
library(texreg)
library(memisc)
library(xtable)
library(RColorBrewer)
data %>% filter(combination == "dimension_color" | combination == "dimension_form")
data %>% filter(combination == "dimension_color" | combination == "dimension_form") %>%
mutate(combination == "dimension_X")
data %>% filter(combination == "dimension_color" | combination == "dimension_form") %>%
mutate(combination == "dimension_X") %>% data
data %>% filter(combination == "dimension_color" | combination == "dimension_form") %>%
mutate(combination == "dimension_X") -> data
View(data)
data <- read.csv(file = "../../../dataset/dataset_production.csv")
data %>% filter(combination == "dimension_color" | combination == "dimension_form") %>%
mutate(combination = "dimension_X") %>% data
data %>% filter(combination == "dimension_color" | combination == "dimension_form") %>%
mutate(combination = "dimension_X") -> df_dx
df_dx$annotation <- ifelse(df_dx$annotation == "D", "D_only", "others")
View(df_dx)
glmer_D_others_m0_dx <- glmer(annotation ~ relevant_property * distribution, data = df_dx)
glmer_D_others_m0_dx <- glmer(annotation ~ relevant_property * sharpness, data = df_dx)
glmer_D_others_m0_dx <- glmer(annotation ~ relevant_property * sharpness + (1 | item), data = df_dx)
df_dx$annotation <- ifelse(df_dx$annotation == "D", "1", "0")
data %>% filter(combination == "dimension_color" | combination == "dimension_form") %>%
mutate(combination = "dimension_X") -> df_dx
df_dx$annotation <- ifelse(df_dx$annotation == "D", "1", "0")
glmer_D_others_m0_dx <- glmer(annotation ~ relevant_property * sharpness + (1 | item), data = df_dx)
data %>% filter(combination == "dimension_color" | combination == "dimension_form") %>%
mutate(combination = "dimension_X") -> df_dx
df_dx$annotation <- ifelse(df_dx$annotation == "D", 1, 0)
glmer_D_others_m0_dx <- glmer(annotation ~ relevant_property * sharpness + (1 | item), data = df_dx)
glmer_D_others_m0_dx <- glmer(annotation ~ relevant_property * sharpness + (1 | item), data = df_dx, family = binomial)
? glmer
# Encode factor
factor(data$relevant_property)
# Encode factor
factor(data$sharpness)
# Encode factor
data$sharpness <- factor(data$sharpness)
View(data)
summary(glmer_D_others_m0_dx)
glmer_D_others_m0_dx <- glm(annotation ~ relevant_property * sharpness, data = df_dx, family = binomial)
summary(glmer_D_others_m0_dx)
anova(glmer_D_others_m0_dx,glmer_D_others_m1_dx)
glmer_D_others_m1_dx <- glm(annotation ~ relevant_property + sharpness, data = df_dx, family = binomial)
anova(glmer_D_others_m0_dx,glmer_D_others_m1_dx)
anova(glmer_D_others_m0_dx,glmer_D_others_m1_dx,test = "Chisq")
data %>% filter(combination == "dimension_color" | combination == "dimension_form") %>%
mutate(combination = "dimension_X") -> df_dx
data <- read.csv(file = "../../../dataset/dataset_production.csv")
data %>% filter(combination == "dimension_color" | combination == "dimension_form") %>%
mutate(combination = "dimension_X") -> df_dx
df_dx_donly$annotation <- ifelse(df_dx$annotation == "D", 1, 0)
df_dx$encoding <- ifelse(df_dx$annotation == "D", 1, 0)
glmer_donly_m0_dx <- glm(encoding ~ relevant_property * sharpness, data = df_dx, family = binomial)
glmer_donly_m1_dx <- glm(encoding ~ relevant_property + sharpness, data = df_dx, family = binomial)
summary(glmer_donly_m0_dx) # relevant_propertyfirst:sharpnesssharp    2.2530     1.2338   1.826   0.0678 .
anova(glmer_donly_m0_dx,glmer_donly_m1_dx, test = "Chisq")
# Re-encode productions to D-first and others
# 1 for D-first, 0 for others
df_dx$encoding <- ifelse(substr(df_dx$annotation, 1, 1) == "D", 1, 0)
glmer_dfirst_m0_dx <- glm(encoding ~ relevant_property * sharpness, data = df_dx, family = binomial)
glmer_dfirst_m1_dx <- glm(encoding ~ relevant_property + sharpness, data = df_dx, family = binomial)
summary(glmer_dfirst_m0_dx) # relevant_propertyfirst:sharpnesssharp    2.2530     1.2338   1.826   0.0678 .
anova(glmer_dfirst_m0_dx,glmer_dfirst_m1_dx, test = "Chisq") # no significant interaction
data <- load("data_preprocessing.Rdata")
setwd("~/Documents/GitHub/numpyro_adjective_modelling/analysis/regression/production")
data <- load("data_preprocessing.Rdata")
data <- load("data_preprocessed.Rdata")
setwd("~/Documents/GitHub/numpyro_adjective_modelling/analysis/regression/production")
data <- read.csv(file = "../../../dataset/taishan_full_annotiert.csv")
subj_info <-read.csv(file = "../../../dataset/taishan_subj_info.csv")
#show how many pps
sum(xtabs(~id,data=subj_info))
#show conditions
xtabs(~id+conditions, data=data)
#exclude pps with more than three s.e. away from mean experiment time
hist(subj_info$time_in_minutes)
mean(subj_info$time_in_minutes)
sd(subj_info$time_in_minutes)
x <- mean(subj_info$time_in_minutes) + 3 * sd(subj_info$time_in_minutes)
y <- mean(subj_info$time_in_minutes) - 3 * sd(subj_info$time_in_minutes)
filter(subj_info, time_in_minutes < y | time_in_minutes > x)
exclude <- filter(subj_info, time_in_minutes < y | time_in_minutes > x)$id
#exclude pps with more than 20% identical responses
data_ex <- as.data.frame(xtabs(~id+annotation, data = data))
data_ex$Freq <- as.numeric(data_ex$Freq)
exclude <- append(exclude, levels(droplevels(filter(data_ex, Freq > 108)$id)))
#exclude pps with more than 10% NA responses
data_na <- subset(data, is.na(data$annotation))
exclude <- append(exclude, names(which(xtabs(~id,data_na)>10)))
#subset excluded pps
data <- subset(data, !data$id %in% exclude)
# show lists for nachhebung
xtabs(~id+list, data=data)
20 - round(xtabs(~list, data=data)/135)
sum(xtabs(~id,data=data)/81)
#subset filler items
data_filler <- subset(data, str_sub(data$conditions, 1, 1) == "f")
data <- droplevels(subset(data, str_sub(data$conditions, 1, 1) != "f"))
as.character(data$conditions)
data$conditions[data$conditions=="erdf"] <- "frdf"
data$conditions[data$conditions=="erdc"] <- "frdc"
data$conditions[data$conditions=="ercf"] <- "frcf"
data$conditions[data$conditions=="zrdf"] <- "srdf"
data$conditions[data$conditions=="zrdc"] <- "srdc"
data$conditions[data$conditions=="zrcf"] <- "srcf"
# show how many NAs
data$none_fits <- ifelse(is.na(data$annotation), 1, 0)
xtabs(~none_fits, data = data)
#coercion NA value
data <- subset(data, !is.na(data$annotation))
# set up factors
data$combination <- as.factor(ifelse(str_sub(data$conditions, 3, 4)=="cf", "color_form",
ifelse(str_sub(data$conditions, 3, 4)=="dc", "dimension_color",
"dimension_form")))
library(tidyr)
library(ggplot2)
library(gridExtra)
library(trimr)
library(stringr)
library(lme4)
library(lmerTest)
library(dplyr)
library(ordinal)
library(effects)
library(optimx)
library(emmeans)
library(pbkrtest)
library(multcomp)
library(sjPlot)
library(sjmisc)
library(ggplot2)
library(texreg)
library(memisc)
library(xtable)
library(RColorBrewer)
# set up factors
data$combination <- as.factor(ifelse(str_sub(data$conditions, 3, 4)=="cf", "color_form",
ifelse(str_sub(data$conditions, 3, 4)=="dc", "dimension_color",
"dimension_form")))
data$relevant_property <- as.factor(ifelse(str_sub(data$conditions, 1, 1)== "f", "first",
ifelse(str_sub(data$conditions, 1, 1)== "s", "second",
"both")))
data$annotation <- as.factor(data$annotation)
data$dist <- ifelse(data$list<4, "sharp", "blurred")
data$dist <- as.factor(data$dist)
xtabs(~annotation, data)
#subset freq
data_sharp <- subset(data, dist == "sharp")
dat <- as.data.frame(xtabs(~conditions+annotation, data = data_sharp))
data_blurred <- subset(data, dist == "blurred")
dat_blurred <- as.data.frame(xtabs(~conditions+annotation, data = data_blurred))
saveRDS(data, file = "data_preprocessed.Rdata")
library(tidyr)
library(ggplot2)
library(gridExtra)
library(trimr)
library(stringr)
library(lme4)
library(lmerTest)
library(dplyr)
library(ordinal)
library(effects)
library(optimx)
library(emmeans)
library(pbkrtest)
library(multcomp)
library(sjPlot)
library(sjmisc)
library(ggplot2)
library(texreg)
library(memisc)
library(xtable)
library(RColorBrewer)
rm(list=ls())
#setwd("~/GitHub/taishan/analysis")
plots_dir<- file.path(getwd(),"plots")
if(!dir.exists(plots_dir)) dir.create(plots_dir, recursive = TRUE, showWarnings = FALSE)
data <- read.csv(file = "../data/taishan_full_annotiert.csv")
data <- load("data_preprocessed.Rdata")
load("~/Documents/GitHub/numpyro_adjective_modelling/analysis/regression/production/data_preprocessed.Rdata")
library(tidyr)
library(ggplot2)
library(gridExtra)
library(trimr)
library(stringr)
library(lme4)
library(lmerTest)
library(dplyr)
library(ordinal)
library(effects)
library(optimx)
library(emmeans)
library(pbkrtest)
library(multcomp)
library(sjPlot)
library(sjmisc)
library(ggplot2)
library(texreg)
library(memisc)
library(xtable)
library(RColorBrewer)
rm(list=ls())
#setwd("~/GitHub/taishan/analysis")
plots_dir<- file.path(getwd(),"plots")
if(!dir.exists(plots_dir)) dir.create(plots_dir, recursive = TRUE, showWarnings = FALSE)
data <- read.csv(file = "../../../dataset/taishan_full_annotiert.csv")
subj_info <-read.csv(file = "../../../dataset/taishan_subj_info.csv")
#show how many pps
sum(xtabs(~id,data=subj_info))
#show conditions
xtabs(~id+conditions, data=data)
#exclude pps with more than three s.e. away from mean experiment time
hist(subj_info$time_in_minutes)
mean(subj_info$time_in_minutes)
sd(subj_info$time_in_minutes)
x <- mean(subj_info$time_in_minutes) + 3 * sd(subj_info$time_in_minutes)
y <- mean(subj_info$time_in_minutes) - 3 * sd(subj_info$time_in_minutes)
filter(subj_info, time_in_minutes < y | time_in_minutes > x)
exclude <- filter(subj_info, time_in_minutes < y | time_in_minutes > x)$id
#exclude pps with more than 20% identical responses
data_ex <- as.data.frame(xtabs(~id+annotation, data = data))
data_ex$Freq <- as.numeric(data_ex$Freq)
exclude <- append(exclude, levels(droplevels(filter(data_ex, Freq > 108)$id)))
#exclude pps with more than 10% NA responses
data_na <- subset(data, is.na(data$annotation))
exclude <- append(exclude, names(which(xtabs(~id,data_na)>10)))
#subset excluded pps
data <- subset(data, !data$id %in% exclude)
# show lists for nachhebung
xtabs(~id+list, data=data)
20 - round(xtabs(~list, data=data)/135)
sum(xtabs(~id,data=data)/81)
#subset filler items
data_filler <- subset(data, str_sub(data$conditions, 1, 1) == "f")
data <- droplevels(subset(data, str_sub(data$conditions, 1, 1) != "f"))
as.character(data$conditions)
data$conditions[data$conditions=="erdf"] <- "frdf"
data$conditions[data$conditions=="erdc"] <- "frdc"
data$conditions[data$conditions=="ercf"] <- "frcf"
data$conditions[data$conditions=="zrdf"] <- "srdf"
data$conditions[data$conditions=="zrdc"] <- "srdc"
data$conditions[data$conditions=="zrcf"] <- "srcf"
# show how many NAs
data$none_fits <- ifelse(is.na(data$annotation), 1, 0)
xtabs(~none_fits, data = data)
#coercion NA value
data <- subset(data, !is.na(data$annotation))
# set up factors
data$combination <- as.factor(ifelse(str_sub(data$conditions, 3, 4)=="cf", "color_form",
ifelse(str_sub(data$conditions, 3, 4)=="dc", "dimension_color",
"dimension_form")))
data$relevant_property <- as.factor(ifelse(str_sub(data$conditions, 1, 1)== "f", "first",
ifelse(str_sub(data$conditions, 1, 1)== "s", "second",
"both")))
data$annotation <- as.factor(data$annotation)
data$dist <- ifelse(data$list<4, "sharp", "blurred")
data$dist <- as.factor(data$dist)
xtabs(~annotation, data)
#subset freq
data_sharp <- subset(data, dist == "sharp")
dat <- as.data.frame(xtabs(~conditions+annotation, data = data_sharp))
data_blurred <- subset(data, dist == "blurred")
dat_blurred <- as.data.frame(xtabs(~conditions+annotation, data = data_blurred))
saveRDS(data, file = "data_preprocessed.Rdata")
library(tidyr)
library(ggplot2)
library(gridExtra)
library(trimr)
library(stringr)
library(lme4)
library(lmerTest)
library(dplyr)
library(ordinal)
library(effects)
library(optimx)
library(emmeans)
library(pbkrtest)
library(multcomp)
library(sjPlot)
library(sjmisc)
library(ggplot2)
library(texreg)
library(memisc)
library(xtable)
library(RColorBrewer)
rm(list=ls())
#setwd("~/GitHub/taishan/analysis")
plots_dir<- file.path(getwd(),"plots")
if(!dir.exists(plots_dir)) dir.create(plots_dir, recursive = TRUE, showWarnings = FALSE)
data <- load("data_preprocessed.Rdata")
data <- readRDS("data_preprocessed.Rdata")
View(data)
data$combination <- ifelse(data$combination == "dimension_color" |
data$combination == "dimension_form",
"dimension_X",
data$combination)
View(data)
data$combination <- ifelse(data$combination == "dimension_color" |
data$combination == "dimension_form",
"dimension_X",
"color_form")
df_dx$combination <- ifelse(data$combination == "dimension_color" |
data$combination == "dimension_form",
"dimension_X",
"color_form")
data <- readRDS("data_preprocessed.Rdata")
data %>% select(data$combination == "dimension_color" |
data$combination == "dimension_form") %>%
mutate(combination = "dimension_X") -> df_dx
data %>% select(combination == "dimension_color" |
combination == "dimension_form") %>%
mutate(combination = "dimension_X") -> df_dx
data %>%
mutate(combination = ifelse(combination == "dimension_color" |
combination == "dimension_form",
"dimension_X",
"color_form")) -> df_dx
View(df_dx)
# Recode annotation with D-first and others
df_dx %>% mutate(encoding = ifelse(substr(df_dx$annotation, 1, 1) == "D", 1, 0)) -> df_dx
View(df_dx)
?glmer
m0_dfirst <- glmer(encoding~combination*relevant_property*dist + (1 | id) + (1 | item), data = df_dx, family = binominal)
m0_dfirst <- glmer(encoding~combination*relevant_property*dist + (1 | id) + (1 | item), data = df_dx, family = binomial)
m0_dfirst <- glmer(encoding~combination*relevant_property*dist + (1 | id), data = df_dx, family = binomial)
m0_dfirst <- glm(encoding~combination*relevant_property*dist, data = df_dx, family = binomial)
summary(m0_dfirst)
data %>%
mutate(combination = ifelse(combination == "dimension_color" |
combination == "dimension_form",
"dimension_X",
"color_form")) %>%
filter(combination == "dimension_X") -> df_dx
# Recode annotation with D-first and others
df_dx %>% mutate(encoding = ifelse(substr(df_dx$annotation, 1, 1) == "D", 1, 0)) -> df_dx
m0_dfirst <- glmr(encoding~relevant_property*dist + (1 | id) + (1 | item), data = df_dx, family = binomial)
m0_dfirst <- glmer(encoding~relevant_property*dist + (1 | id) + (1 | item), data = df_dx, family = binomial)
summary(m0_dfirst)
m1_dfirst <- update(m0_dfirst, .~. - relevant:dist)
summary(m1_dfist)
summary(m1_dfrist)
summary(m1_dfirst)
m1_dfirst <- update(m0_dfirst, .~. -relevant:dist)
summary(m1_dfirst)
?update
m1_dfirst <- update(m0_dfirst, .~. -relevant_property:dist)
summary(m1_dfirst)
anova(m0_dfirst, m1_dfirst, test="Chisq")
# Recode annotation with D-only and others
df_dx %>% mutate(encoding = ifelse(annotation == "D", 1, 0)) -> df_dx
m0_donly <- glmer(encoding~relevant_property*dist + (1 | id) + (1 | item), data = df_dx, family = binomial)
summary(m0_donly)
m0_donly <- glmer(encoding~relevant_property*dist + (1 | id) + (1 | item), data = df_dx, family = binomial)
m0_donly <- glmer(encoding~relevant_property*dist + (1 | id), data = df_dx, family = binomial)
m0_donly <- glmer(encoding~relevant_property*dist + (1 | id) + (1 | item), data = df_dx, family = binomial)
summary(m0_donly)
m1_donly <- update(m0_donly, .~. -relevant_property:dist)
anova(m0_donly, m1_donly, test="Chisq")
library(tidyr)
library(ggplot2)
library(gridExtra)
library(trimr)
library(stringr)
library(lme4)
library(lmerTest)
library(dplyr)
library(ordinal)
library(effects)
library(optimx)
library(emmeans)
library(pbkrtest)
library(multcomp)
library(sjPlot)
library(sjmisc)
library(ggplot2)
library(texreg)
library(memisc)
library(xtable)
library(RColorBrewer)
rm(list=ls())
#setwd("~/GitHub/taishan/analysis")
plots_dir<- file.path(getwd(),"plots")
if(!dir.exists(plots_dir)) dir.create(plots_dir, recursive = TRUE, showWarnings = FALSE)
data <- readRDS("data_preprocessed.Rdata")
# Recode combination to dimension_X
data %>%
mutate(combination = ifelse(combination == "dimension_color" |
combination == "dimension_form",
"dimension_X",
"color_form")) %>% df
data %>%
mutate(combination = ifelse(combination == "dimension_color" |
combination == "dimension_form",
"dimension_X",
"color_form")) -> df
# Recode annotation with D-first and others
df %>% mutate(encoding = ifelse(substr(df_dx$annotation, 1, 1) == "D", 1, 0)) -> df
# Recode annotation with D-first and others
df %>% mutate(encoding = ifelse(substr(df$annotation, 1, 1) == "D", 1, 0)) -> df
# Recode annotation with D-first and others
data %>% mutate(encoding = ifelse(substr(annotation, 1, 1) == "D", 1, 0)) -> data
m0_dfirst <- glmer(encoding~relevant_property*dist*combination + (1 | id) + (1 | item), data = data, family = binomial)
# m0_dfirst <- glmer(encoding~relevant_property*dist*combination + (1 | id) + (1 | item), data = data, family = binomial)
# Using above random structure, model fails to converge, try another:
m0_dfirst <- glmer(encoding~relevant_property*dist*combination + (1 | id), data = data, family = binomial)
# m0_dfirst <- glmer(encoding~relevant_property*dist*combination + (1 | id) + (1 | item), data = data, family = binomial)
# Using above random structure, model fails to converge, try another:
m0_dfirst <- glm(encoding~relevant_property*dist*combination, data = data, family = binomial)
summary(m0_dfirst) # sharp strength the effect of relevance in its direction, in line with the effect in slider data
m1_dfirst <- update(m0_dfirst, .~. -relevant_property:dist:combination)
anova(m0_dfirst, m1_dfirst, test="Chisq") # sig. interaction
# Recode combination to dimension_X
data %>%
mutate(combination = ifelse(combination == "dimension_color" |
combination == "dimension_form",
"dimension_X",
"color_form")) %>% filter(combination == "dimension_X")-> df_dx
# Recode annotation with D-only and others
df_dx %>% mutate(encoding = ifelse(substr(annotation, 1, 1) == "D", 1, 0)) -> df_dx
m0_donly <- glmer(encoding~relevant_property*dist + (1 | id) + (1 | item), data = df_dx, family = binomial)
m0_dfirst_dx <- glmer(encoding~relevant_property*dist + (1 | id) + (1 | item), data = df_dx, family = binomial)
summary(m0_dfirst_dx) # relevant_propertyfirst:distsharp    2.3810     1.2702   1.875   0.0609 .
m1_dfirst_dx <- update(m0_donly, .~. -relevant_property:dist)
anova(m0_dfirst_dx, m1_dfirst_dx, test="Chisq") # no sig. interaction
library(tidyr)
library(ggplot2)
library(gridExtra)
library(trimr)
library(stringr)
library(lme4)
library(lmerTest)
library(dplyr)
library(ordinal)
library(effects)
library(optimx)
library(emmeans)
library(pbkrtest)
library(multcomp)
library(sjPlot)
library(sjmisc)
library(ggplot2)
library(texreg)
library(memisc)
library(xtable)
library(RColorBrewer)
rm(list=ls())
#setwd("~/GitHub/taishan/analysis")
plots_dir<- file.path(getwd(),"plots")
if(!dir.exists(plots_dir)) dir.create(plots_dir, recursive = TRUE, showWarnings = FALSE)
data <- readRDS("data_preprocessed.Rdata")
# Recode combination to dimension_X
data %>%
mutate(combination = ifelse(combination == "dimension_color" |
combination == "dimension_form",
"dimension_X",
"color_form")) %>% filter(combination == "dimension_X")-> df_dx
# Recode annotation with CDF and others
data %>% mutate(encoding = ifelse(substr(annotation, 1, 1) == "D", 1, 0)) -> data
# Recode annotation with D-only and others
df_dx %>% mutate(encoding = ifelse(annotation == "D", 1, 0)) -> df_dx
# Perform GlMER analysis
m0_donly <- glmer(encoding~relevant_property*dist + (1 | id) + (1 | item), data = df_dx, family = binomial)
summary(m0_donly) # relevant_propertyfirst:distsharp    2.3810     1.2702   1.875   0.0609 .
m1_donly <- update(m0_donly, .~. -relevant_property:dist)
anova(m0_donly, m1_donly, test="Chisq") # no sig. interaction
library(tidyr)
library(ggplot2)
library(gridExtra)
library(trimr)
library(stringr)
library(lme4)
library(lmerTest)
library(dplyr)
library(ordinal)
library(effects)
library(optimx)
library(emmeans)
library(pbkrtest)
library(multcomp)
library(sjPlot)
library(sjmisc)
library(ggplot2)
library(texreg)
library(memisc)
library(xtable)
library(RColorBrewer)
rm(list=ls())
#setwd("~/GitHub/taishan/analysis")
plots_dir<- file.path(getwd(),"plots")
if(!dir.exists(plots_dir)) dir.create(plots_dir, recursive = TRUE, showWarnings = FALSE)
data <- readRDS("data_preprocessed.Rdata")
# Recode combination to dimension_X
data %>%
mutate(combination = ifelse(combination == "dimension_color" |
combination == "dimension_form",
"dimension_X",
"color_form")) %>%
filter(combination == "dimension_X") -> df_dx
# Recode annotation with D-first and others
df_dx %>% mutate(encoding = ifelse(substr(df_dx$annotation, 1, 1) == "D", 1, 0)) -> df_dx
# Perform GlMER analysis
m0_dfirst <- glmer(encoding~relevant_property*dist + (1 | id) + (1 | item), data = df_dx, family = binomial)
summary(m0_dfirst) # sharp strength the effect of relevance in its direction, in line with the effect in slider data
m1_dfirst <- update(m0_dfirst, .~. -relevant_property:dist)
anova(m0_dfirst, m1_dfirst, test="Chisq") # sig. interaction
